package com.zxy.shopsystem.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class TransferOrderExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public TransferOrderExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andTnoIsNull() {
            addCriterion("tno is null");
            return (Criteria) this;
        }

        public Criteria andTnoIsNotNull() {
            addCriterion("tno is not null");
            return (Criteria) this;
        }

        public Criteria andTnoEqualTo(Integer value) {
            addCriterion("tno =", value, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoNotEqualTo(Integer value) {
            addCriterion("tno <>", value, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoGreaterThan(Integer value) {
            addCriterion("tno >", value, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoGreaterThanOrEqualTo(Integer value) {
            addCriterion("tno >=", value, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoLessThan(Integer value) {
            addCriterion("tno <", value, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoLessThanOrEqualTo(Integer value) {
            addCriterion("tno <=", value, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoIn(List<Integer> values) {
            addCriterion("tno in", values, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoNotIn(List<Integer> values) {
            addCriterion("tno not in", values, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoBetween(Integer value1, Integer value2) {
            addCriterion("tno between", value1, value2, "tno");
            return (Criteria) this;
        }

        public Criteria andTnoNotBetween(Integer value1, Integer value2) {
            addCriterion("tno not between", value1, value2, "tno");
            return (Criteria) this;
        }

        public Criteria andFromNoIsNull() {
            addCriterion("from_no is null");
            return (Criteria) this;
        }

        public Criteria andFromNoIsNotNull() {
            addCriterion("from_no is not null");
            return (Criteria) this;
        }

        public Criteria andFromNoEqualTo(Integer value) {
            addCriterion("from_no =", value, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoNotEqualTo(Integer value) {
            addCriterion("from_no <>", value, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoGreaterThan(Integer value) {
            addCriterion("from_no >", value, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoGreaterThanOrEqualTo(Integer value) {
            addCriterion("from_no >=", value, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoLessThan(Integer value) {
            addCriterion("from_no <", value, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoLessThanOrEqualTo(Integer value) {
            addCriterion("from_no <=", value, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoIn(List<Integer> values) {
            addCriterion("from_no in", values, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoNotIn(List<Integer> values) {
            addCriterion("from_no not in", values, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoBetween(Integer value1, Integer value2) {
            addCriterion("from_no between", value1, value2, "fromNo");
            return (Criteria) this;
        }

        public Criteria andFromNoNotBetween(Integer value1, Integer value2) {
            addCriterion("from_no not between", value1, value2, "fromNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoIsNull() {
            addCriterion("destination_no is null");
            return (Criteria) this;
        }

        public Criteria andDestinationNoIsNotNull() {
            addCriterion("destination_no is not null");
            return (Criteria) this;
        }

        public Criteria andDestinationNoEqualTo(Integer value) {
            addCriterion("destination_no =", value, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoNotEqualTo(Integer value) {
            addCriterion("destination_no <>", value, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoGreaterThan(Integer value) {
            addCriterion("destination_no >", value, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoGreaterThanOrEqualTo(Integer value) {
            addCriterion("destination_no >=", value, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoLessThan(Integer value) {
            addCriterion("destination_no <", value, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoLessThanOrEqualTo(Integer value) {
            addCriterion("destination_no <=", value, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoIn(List<Integer> values) {
            addCriterion("destination_no in", values, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoNotIn(List<Integer> values) {
            addCriterion("destination_no not in", values, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoBetween(Integer value1, Integer value2) {
            addCriterion("destination_no between", value1, value2, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDestinationNoNotBetween(Integer value1, Integer value2) {
            addCriterion("destination_no not between", value1, value2, "destinationNo");
            return (Criteria) this;
        }

        public Criteria andDateIsNull() {
            addCriterion("date is null");
            return (Criteria) this;
        }

        public Criteria andDateIsNotNull() {
            addCriterion("date is not null");
            return (Criteria) this;
        }

        public Criteria andDateEqualTo(Date value) {
            addCriterionForJDBCDate("date =", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("date <>", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateGreaterThan(Date value) {
            addCriterionForJDBCDate("date >", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date >=", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateLessThan(Date value) {
            addCriterionForJDBCDate("date <", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("date <=", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateIn(List<Date> values) {
            addCriterionForJDBCDate("date in", values, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("date not in", values, "date");
            return (Criteria) this;
        }

        public Criteria andDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date between", value1, value2, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("date not between", value1, value2, "date");
            return (Criteria) this;
        }

        public Criteria andOperNoIsNull() {
            addCriterion("oper_no is null");
            return (Criteria) this;
        }

        public Criteria andOperNoIsNotNull() {
            addCriterion("oper_no is not null");
            return (Criteria) this;
        }

        public Criteria andOperNoEqualTo(Integer value) {
            addCriterion("oper_no =", value, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoNotEqualTo(Integer value) {
            addCriterion("oper_no <>", value, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoGreaterThan(Integer value) {
            addCriterion("oper_no >", value, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoGreaterThanOrEqualTo(Integer value) {
            addCriterion("oper_no >=", value, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoLessThan(Integer value) {
            addCriterion("oper_no <", value, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoLessThanOrEqualTo(Integer value) {
            addCriterion("oper_no <=", value, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoIn(List<Integer> values) {
            addCriterion("oper_no in", values, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoNotIn(List<Integer> values) {
            addCriterion("oper_no not in", values, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoBetween(Integer value1, Integer value2) {
            addCriterion("oper_no between", value1, value2, "operNo");
            return (Criteria) this;
        }

        public Criteria andOperNoNotBetween(Integer value1, Integer value2) {
            addCriterion("oper_no not between", value1, value2, "operNo");
            return (Criteria) this;
        }

        public Criteria andIsfinishIsNull() {
            addCriterion("isfinish is null");
            return (Criteria) this;
        }

        public Criteria andIsfinishIsNotNull() {
            addCriterion("isfinish is not null");
            return (Criteria) this;
        }

        public Criteria andIsfinishEqualTo(Byte value) {
            addCriterion("isfinish =", value, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishNotEqualTo(Byte value) {
            addCriterion("isfinish <>", value, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishGreaterThan(Byte value) {
            addCriterion("isfinish >", value, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishGreaterThanOrEqualTo(Byte value) {
            addCriterion("isfinish >=", value, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishLessThan(Byte value) {
            addCriterion("isfinish <", value, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishLessThanOrEqualTo(Byte value) {
            addCriterion("isfinish <=", value, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishIn(List<Byte> values) {
            addCriterion("isfinish in", values, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishNotIn(List<Byte> values) {
            addCriterion("isfinish not in", values, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishBetween(Byte value1, Byte value2) {
            addCriterion("isfinish between", value1, value2, "isfinish");
            return (Criteria) this;
        }

        public Criteria andIsfinishNotBetween(Byte value1, Byte value2) {
            addCriterion("isfinish not between", value1, value2, "isfinish");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table transfer_order
     *
     * @mbg.generated do_not_delete_during_merge Wed Apr 28 11:02:14 CST 2021
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table transfer_order
     *
     * @mbg.generated Wed Apr 28 11:02:14 CST 2021
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}